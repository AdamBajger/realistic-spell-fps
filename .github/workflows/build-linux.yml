# Linux Container Build Workflow
#
# Complete Linux build pipeline using Docker containers.
# Jobs run sequentially with proper dependencies.
#
name: Build Linux

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  determine-tag:
    name: Determine Image Tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      repo: ${{ steps.tag.outputs.repo }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Generate tag and repo name
        id: tag
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          TAG="dev-${SHORT_SHA}"
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "repo=${REPO_LOWER}" >> $GITHUB_OUTPUT
          echo "Using tag: ${TAG}"
          echo "Using repo: ${REPO_LOWER}"
          echo "registry=${{ env.REGISTRY }}" >> $GITHUB_OUTPUT

  build-base-image:
    name: Build Base Image
    runs-on: ubuntu-latest
    needs: determine-tag
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push base builder
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.devcontainer/base-builder-linux.Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ needs.determine-tag.outputs.repo }}/base-builder-linux:${{ needs.determine-tag.outputs.tag }}
            ${{ env.REGISTRY }}/${{ needs.determine-tag.outputs.repo }}/base-builder-linux:latest
          cache-from: type=gha,scope=base-linux
          cache-to: type=gha,mode=max,scope=base-linux

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [determine-tag, build-base-image]
    permissions:
      contents: read
      packages: write
    container:
      image:  ${{ needs.build-base-image.outputs.registry }}/${{ needs.determine-tag.outputs.repo }}/base-builder-linux:${{ needs.determine-tag.outputs.tag }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: linux-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: linux-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: linux-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build server binary
        run: cargo build --release -p server --no-default-features
      
      - name: Build client binary
        run: cargo build --release -p client --no-default-features
      
      - name: Test binaries run
        run: |
          timeout 5s ./target/release/server || [ $? -eq 124 ] || [ $? -eq 143 ]
          timeout 5s ./target/release/client || [ $? -eq 124 ] || [ $? -eq 143 ]
      
      - name: Run tests
        run: cargo test --workspace --verbose --no-fail-fast --no-default-features
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --workspace --all-targets --no-default-features -- -D warnings
        continue-on-error: true
      
      - name: Upload server binary
        uses: actions/upload-artifact@v4
        with:
          name: server-linux
          path: target/release/server
      
      - name: Upload client binary
        uses: actions/upload-artifact@v4
        with:
          name: client-linux
          path: target/release/client

  runtime-check:
    name: Runtime Check
    runs-on: ubuntu-latest
    needs: build-binaries
    steps:
      - name: Download server binary
        uses: actions/download-artifact@v4
        with:
          name: server-linux
          path: ./bin
      
      - name: Download client binary
        uses: actions/download-artifact@v4
        with:
          name: client-linux
          path: ./bin
      
      - name: Set executable permissions
        run: chmod +x ./bin/server ./bin/client
      
      - name: Test server runs in minimal environment
        run: timeout 5s ./bin/server || [ $? -eq 124 ] || [ $? -eq 143 ]
      
      - name: Test client runs in minimal environment
        run: timeout 5s ./bin/client || [ $? -eq 124 ] || [ $? -eq 143 ]
