# Comprehensive Build Pipeline
#
# This workflow builds and tests the project across all platforms (Linux, Windows, macOS).
# Each platform has its own sequence of jobs that must complete successfully in order.
#
# Platform Sequences:
# 1. Linux: base-image → builder → binaries → tests → runtime-check
# 2. Windows: base-image → builder → binaries → tests → runtime-check  
# 3. macOS: builder (direct) → binaries → tests
#
# Base images are only rebuilt when their Dockerfiles change or are missing from registry.
#
name: Build Pipeline

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}
  CARGO_TERM_COLOR: always

jobs:
  #############################################################################
  # LINUX PLATFORM SEQUENCE
  #############################################################################
  
  linux-base-image:
    name: Linux - Build Base Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.tag.outputs.version }}
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Check if base image build needed
        id: check
        run: |
          # Build if Dockerfile changed or on workflow_dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          elif git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q ".devcontainer/base-builder-linux.Dockerfile"; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            # Check if image exists in registry
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate image tag
        id: tag
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "version=dev-${SHORT_SHA}" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        if: steps.check.outputs.should_build == 'true'
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        if: steps.check.outputs.should_build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Linux base builder
        if: steps.check.outputs.should_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.devcontainer/base-builder-linux.Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/base-builder-linux:${{ steps.tag.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/base-builder-linux:latest
          cache-from: type=gha,scope=base-linux
          cache-to: type=gha,mode=max,scope=base-linux

  linux-build-binaries:
    name: Linux - Build Binaries
    runs-on: ubuntu-latest
    needs: linux-base-image
    permissions:
      contents: read
      packages: write
    container:
      image: ghcr.io/${{ github.repository }}/base-builder-linux:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: linux-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: linux-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: linux-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build server binary
        run: cargo build --release -p server --no-default-features
      
      - name: Build client binary
        run: cargo build --release -p client --no-default-features
      
      - name: Upload server binary
        uses: actions/upload-artifact@v4
        with:
          name: server-linux
          path: target/release/server
      
      - name: Upload client binary
        uses: actions/upload-artifact@v4
        with:
          name: client-linux
          path: target/release/client

  linux-test-and-lint:
    name: Linux - Test & Lint
    runs-on: ubuntu-latest
    needs: linux-base-image
    permissions:
      contents: read
      packages: write
    container:
      image: ghcr.io/${{ github.repository }}/base-builder-linux:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: linux-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: linux-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: linux-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run tests
        run: cargo test --workspace --verbose --no-fail-fast --no-default-features
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --workspace --all-targets --no-default-features -- -D warnings
        continue-on-error: true

  linux-runtime-check:
    name: Linux - Runtime Check
    runs-on: ubuntu-latest
    needs: linux-build-binaries
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download server binary
        uses: actions/download-artifact@v4
        with:
          name: server-linux
          path: ./bin
      
      - name: Download client binary
        uses: actions/download-artifact@v4
        with:
          name: client-linux
          path: ./bin
      
      - name: Set executable permissions
        run: chmod +x ./bin/server ./bin/client
      
      - name: Test server runs
        run: timeout 5s ./bin/server || [ $? -eq 124 ]
      
      - name: Test client runs
        run: timeout 5s ./bin/client || [ $? -eq 124 ]

  #############################################################################
  # WINDOWS PLATFORM SEQUENCE
  #############################################################################
  
  windows-base-image:
    name: Windows - Build Base Image
    runs-on: windows-2022
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.tag.outputs.version }}
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Check if base image build needed
        id: check
        shell: bash
        run: |
          # Build if Dockerfile changed or on workflow_dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          elif git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q ".devcontainer/base-builder-windows.Dockerfile"; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate image tag
        id: tag
        shell: bash
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "version=dev-${SHORT_SHA}" >> $GITHUB_OUTPUT
      
      - name: Prepare repository name
        id: prepare
        shell: bash
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "repo=${REPO_LOWER}" >> $GITHUB_OUTPUT
      
      - name: Log in to GitHub Container Registry
        if: steps.check.outputs.should_build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Windows base builder
        if: steps.check.outputs.should_build == 'true'
        run: |
          docker build -f .devcontainer/base-builder-windows.Dockerfile -t ${{ env.REGISTRY }}/${{ steps.prepare.outputs.repo }}/base-builder-windows:${{ steps.tag.outputs.version }} .
          docker tag ${{ env.REGISTRY }}/${{ steps.prepare.outputs.repo }}/base-builder-windows:${{ steps.tag.outputs.version }} ${{ env.REGISTRY }}/${{ steps.prepare.outputs.repo }}/base-builder-windows:latest
          docker push ${{ env.REGISTRY }}/${{ steps.prepare.outputs.repo }}/base-builder-windows:${{ steps.tag.outputs.version }}
          docker push ${{ env.REGISTRY }}/${{ steps.prepare.outputs.repo }}/base-builder-windows:latest

  windows-build-binaries:
    name: Windows - Build Binaries
    runs-on: windows-2022
    needs: windows-base-image
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: windows-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: windows-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: windows-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build server binary
        run: cargo build --release -p server --no-default-features
      
      - name: Build client binary
        run: cargo build --release -p client --no-default-features
      
      - name: Upload server binary
        uses: actions/upload-artifact@v4
        with:
          name: server-windows
          path: target/release/server.exe
      
      - name: Upload client binary
        uses: actions/upload-artifact@v4
        with:
          name: client-windows
          path: target/release/client.exe

  windows-test-and-lint:
    name: Windows - Test & Lint
    runs-on: windows-2022
    needs: windows-base-image
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: windows-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: windows-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: windows-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run tests
        run: cargo test --workspace --verbose --no-fail-fast --no-default-features
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --workspace --all-targets --no-default-features -- -D warnings
        continue-on-error: true

  windows-runtime-check:
    name: Windows - Runtime Check
    runs-on: windows-2022
    needs: windows-build-binaries
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download server binary
        uses: actions/download-artifact@v4
        with:
          name: server-windows
          path: ./bin
      
      - name: Download client binary
        uses: actions/download-artifact@v4
        with:
          name: client-windows
          path: ./bin
      
      - name: Test server runs
        shell: pwsh
        run: |
          $job = Start-Job { & ./bin/server.exe }
          Start-Sleep -Seconds 5
          Stop-Job $job
          if ($job.State -ne "Running") { exit 1 }
      
      - name: Test client runs
        shell: pwsh
        run: |
          $job = Start-Job { & ./bin/client.exe }
          Start-Sleep -Seconds 5
          Stop-Job $job
          if ($job.State -ne "Running") { exit 1 }

  #############################################################################
  # MACOS PLATFORM SEQUENCE
  #############################################################################
  
  macos-build-binaries:
    name: macOS - Build Binaries
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: macos-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: macos-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: macos-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build server binary
        run: cargo build --release -p server --no-default-features
      
      - name: Build client binary
        run: cargo build --release -p client --no-default-features
      
      - name: Upload server binary
        uses: actions/upload-artifact@v4
        with:
          name: server-macos
          path: target/release/server
      
      - name: Upload client binary
        uses: actions/upload-artifact@v4
        with:
          name: client-macos
          path: target/release/client

  macos-test-and-lint:
    name: macOS - Test & Lint
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: macos-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: macos-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: macos-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run tests
        run: cargo test --workspace --verbose --no-fail-fast --no-default-features
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --workspace --all-targets --no-default-features -- -D warnings
        continue-on-error: true

  macos-runtime-check:
    name: macOS - Runtime Check
    runs-on: macos-latest
    needs: macos-build-binaries
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download server binary
        uses: actions/download-artifact@v4
        with:
          name: server-macos
          path: ./bin
      
      - name: Download client binary
        uses: actions/download-artifact@v4
        with:
          name: client-macos
          path: ./bin
      
      - name: Set executable permissions
        run: chmod +x ./bin/server ./bin/client
      
      - name: Test server runs
        run: timeout 5s ./bin/server || [ $? -eq 124 ]
      
      - name: Test client runs
        run: timeout 5s ./bin/client || [ $? -eq 124 ]
