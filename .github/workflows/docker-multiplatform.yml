# Multi-Platform Docker Build Workflow
#
# Builds runtime images for all platforms.
# Depends on base builder images being available.
#
# Published to: GitHub Container Registry (ghcr.io)
#
name: Build Runtime Images

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
    paths-ignore:
      - '.devcontainer/base-builder-linux.Dockerfile'
      - '.devcontainer/base-builder-windows.Dockerfile'
      - '.github/workflows/build-base-images.yml'
  pull_request:
    branches: [ master, main ]
    paths-ignore:
      - '.devcontainer/base-builder-linux.Dockerfile'
      - '.devcontainer/base-builder-windows.Dockerfile'
      - '.github/workflows/build-base-images.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  build-linux:
    name: Build Linux Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for client
        id: meta-client
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/client-linux
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push client
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.devcontainer/client-linux.Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-client.outputs.tags }}
          labels: ${{ steps.meta-client.outputs.labels }}
          cache-from: type=gha,scope=client-linux
          cache-to: type=gha,mode=max,scope=client-linux
          build-args: |
            BASE_BUILDER_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/base-builder-linux:latest
      
      - name: Extract metadata for server
        id: meta-server
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/server-linux
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push server
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.devcontainer/server-linux.Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-server.outputs.tags }}
          labels: ${{ steps.meta-server.outputs.labels }}
          cache-from: type=gha,scope=server-linux
          cache-to: type=gha,mode=max,scope=server-linux
          build-args: |
            BASE_BUILDER_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/base-builder-linux:latest

  build-windows:
    name: Build Windows Images
    runs-on: windows-2022
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Prepare Docker tags
        id: prepare
        shell: bash
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          REF_SAFE=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | sed 's/\//-/g')
          echo "repo=${REPO_LOWER}" >> $GITHUB_OUTPUT
          echo "tag=${REF_SAFE}" >> $GITHUB_OUTPUT
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
      
      - name: Build and push Windows client
        run: |
          docker build -f .devcontainer/client-windows.Dockerfile --build-arg BASE_BUILDER_IMAGE=${{ env.REGISTRY }}/${{ steps.prepare.outputs.repo }}/base-builder-windows:latest -t ${{ env.REGISTRY }}/${{ steps.prepare.outputs.repo }}/client-windows:${{ steps.prepare.outputs.tag }} .
          if ("${{ github.event_name }}" -ne "pull_request") {
            docker push ${{ env.REGISTRY }}/${{ steps.prepare.outputs.repo }}/client-windows:${{ steps.prepare.outputs.tag }}
          }
      
      - name: Build and push Windows server
        run: |
          docker build -f .devcontainer/server-windows.Dockerfile --build-arg BASE_BUILDER_IMAGE=${{ env.REGISTRY }}/${{ steps.prepare.outputs.repo }}/base-builder-windows:latest -t ${{ env.REGISTRY }}/${{ steps.prepare.outputs.repo }}/server-windows:${{ steps.prepare.outputs.tag }} .
          if ("${{ github.event_name }}" -ne "pull_request") {
            docker push ${{ env.REGISTRY }}/${{ steps.prepare.outputs.repo }}/server-windows:${{ steps.prepare.outputs.tag }}
          }
